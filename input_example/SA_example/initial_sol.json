{
    "content":"import numpy as np\ndef getInitialSolutionTS(distance_matrix, total_cities) -> np.ndarray:\n\tSolution = [0]\n\tremaining_cities  = list(range(1,total_cities))\n\twhile len(remaining_cities) != 0:\n\t\tfrom_ = Solution[-1]\n\t\tto_ = remaining_cities[0]\n\t\tdist = distance_matrix[from_][to_]\n\t\tfor i in range(1, len(remaining_cities)):\n\t\t\tdistance = distance_matrix[from_][remaining_cities[i]]\n\t\t\tif distance < dist:\n\t\t\t\tto_ = remaining_cities[i]\n\t\t\t\tdist = distance\n\t\tSolution.append(to_)\n\t\tind = remaining_cities.index(to_)\n\t\tremaining_cities.pop(ind)\n\treturn np.array(Solution)"
}